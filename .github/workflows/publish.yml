name: Publish

run-name: "Publish: ${{ inputs.version }}: ${{ github.ref_name }}@${{ github.sha }}"

on:
  workflow_dispatch:
    inputs:
      version:
        description: novel library version and repository tag to apply (e.g. 1.0.2-post5)
        required: true
      force-version:
        description: omit check for semantic versioning
        type: boolean
        required: false

env:
  GIT_COMMITTER_NAME: github-actions[bot]
  GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com

jobs:
  check:
    runs-on: ubuntu-latest

    outputs:
      git-tags: ${{ steps.tags.outputs.git-tags }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          #
          # Fetch ALL history s.t. tags may be sorted by date (creatordate)
          # (regardless of whether the tag or ls-remote --tags command is used)
          #
          # Note: This might be slow! ls-remote allows us to avoid this, *except*
          # that we want to sort by object creation date, which appears to require
          # a complete local clone.
          #
          fetch-depth: 0

      - name: Retrieve tags
        id: tags
        #
        # checkout does not by default load all changesets and tags
        #
        # as such, this can come up empty:
        #
        #   git tag --list
        #
        # instead, (and rather than check out repo history), we can query the remote:
        #
        #   git ls-remote -q --tags --refs --sort=-creatordate | awk -F / '{print $3}'
        #
        # *However* the "creatordate" sort above fails without a deep clone;
        # so, we'll rely on a deep clone, regardless.
        #
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

          echo "git-tags<<$EOF" >> "$GITHUB_OUTPUT"

          git tag --list --sort=-creatordate >> "$GITHUB_OUTPUT"

          echo "$EOF" >> "$GITHUB_OUTPUT"

      - name: Check that tag is novel
        env:
          TAGS: ${{ steps.tags.outputs.git-tags }}
        run: |
          echo "$TAGS" |
            grep -E "^${{ inputs.version }}$" > /dev/null && {
              echo "::error::Tag ${{ inputs.version }} already exists"
              exit 1
            }

          echo "✓ Tag ${{ inputs.version }} is novel"

      - name: Check that version is semantic
        if: ${{ ! inputs.force-version }}
        env:
          SEMVAR_PATTERN: ^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
        shell: python
        run: |
          import os
          import re

          match = re.fullmatch(os.getenv('SEMVAR_PATTERN'), '${{ inputs.version }}')

          if not match:
              print("::error::Version ${{ inputs.version }} is non-semantic")
              raise SystemExit(1)

          items = ('='.join(item) for item in match.groupdict().items() if all(item))

          print("✓ Version ${{ inputs.version }} is semantic:", *items)

  build-push:
    runs-on: ubuntu-latest

    needs: [check]

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        base-image:
          - name: python:3.11-bookworm
            tags: |
              ghcr.io/${{ github.respository }}:latest
              ghcr.io/${{ github.respository }}:bookworm
              ghcr.io/${{ github.respository }}:py311
              ghcr.io/${{ github.respository }}:bookworm-py311
              ghcr.io/${{ github.respository }}:${{ inputs.version }}
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-bookworm
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-py311
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-bookworm-py311
          - name: python:3.11-slim-bookworm
            tags: |
              ghcr.io/${{ github.respository }}:slim
              ghcr.io/${{ github.respository }}:slim-bookworm
              ghcr.io/${{ github.respository }}:slim-py311
              ghcr.io/${{ github.respository }}:slim-bookworm-py311
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-slim
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-slim-bookworm
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-slim-py311
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-slim-bookworm-py311
          - name: ubuntu:22.04
            tags: |
              ghcr.io/${{ github.respository }}:jammy
              ghcr.io/${{ github.respository }}:jammy-py310
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-jammy
              ghcr.io/${{ github.respository }}:${{ inputs.version }}-jammy-py310

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          build-args: BASE_IMAGE=${{ matrix.base-image.name }}
          tags: ${{ matrix.base-image.tags }}

      - name: Write to summary
        env:
          TAGS: ${{ matrix.base-image.tags }}
        run: |
          TAG="$(echo "$TAGS" | head -n1)"

          echo "### Image pushed :ship:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$TAG for ${{ matrix.base-image.name }}" >> $GITHUB_STEP_SUMMARY

  tag:
    runs-on: ubuntu-latest

    needs: [check, build-push]

    permissions:
      contents: write

    steps:
      - name: Configure publishing changeset author
        env:
          SENDER: ${{ github.event.sender.login }}
        run: |
          USER="$(
            gh api users/"$SENDER"
          )"

          NAME="$(echo "$USER" | jq -r .name)"

          if [ -n "$NAME" ]
          then
            echo "GIT_AUTHOR_NAME=$NAME" >> $GITHUB_ENV
          else
            echo "::error::Author name empty for sender $SENDER"
            exit 1
          fi

          EMAIL="$(echo "$USER" | jq -r .email)"

          if [ -n "$EMAIL" ]
          then
            echo "GIT_AUTHOR_EMAIL=$EMAIL" >> $GITHUB_ENV
          else
            echo "::error::Author email empty for sender $SENDER"
            exit 1
          fi

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set and push tag
        env:
          TAGS: ${{ needs.check.outputs.git-tags }}
        run: |
          git tag ${{ inputs.version }}
          git push --tags

          # write summary information
          lastTag="$(echo "$TAGS" | head -n1)"

          echo "### Version bumped :arrow_heading_up:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.ref_name }}@${{ github.sha }} tagged ${{ inputs.version }} over $lastTag" >> $GITHUB_STEP_SUMMARY
